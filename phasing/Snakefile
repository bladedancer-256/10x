localrules: all

import sys, os
from collections import defaultdict
from ngs_utils.vcf_utils import get_tumor_sample_name
from ngs_utils.reference_data import get_key_genes_bed

ref = '/g/data3/gx8/local/development/bcbio/genomes/Hsapiens/GRCh37/seq/GRCh37.fa'

colo_truth = '/g/data3/gx8/extras/colo829_truth/EGAZ00001226241_ListforNatureReports.IndelsandSNVs.final.Suppl1.snpEff.validated.SORTED.vcf.gz'

# TODO:
# 1. Add germline variants in cancer genes. Filter somatic variants down to cancer genes only. 
# 2. Add all germline variants to the true somatic varinants.
# 3. We know the genes for each variant from SnpEff, so can just plot the number of blocks per gene?

BWA = 'BWA'
EMA = 'EMA'

CANCER_GENES = True

snames = [
    '100pc',
    # '80pc',
    # '60pc',
    # '40pc',
    # '20pc',
]

bams = {
    BWA: [
        '/g/data/gx8/data/10X/TruSeq/bcbio_original/BAMs/Colo829-ready_downsample.bam',
        '/g/data/gx8/data/10X/TruSeq/bcbio_original/BAMs/Colo829_80pc-ready_downsample.bam',
        '/g/data/gx8/data/10X/TruSeq/bcbio_original/BAMs/Colo829_60pc-ready_downsample.bam',
        '/g/data/gx8/data/10X/TruSeq/bcbio_original/BAMs/Colo829_40pc-ready_downsample.bam',
        '/g/data/gx8/data/10X/TruSeq/bcbio_original/BAMs/Colo829_20pc-ready_downsample.bam',
    ],
    EMA: [
        '/g/data/gx8/data/10X/10X_EMA/BAMs/COLO829_100pc.bam',
        '/g/data/gx8/data/10X/10X_EMA/BAMs/COLO829_80pc.bam',
        '/g/data/gx8/data/10X/10X_EMA/BAMs/COLO829_60pc.bam',
        '/g/data/gx8/data/10X/10X_EMA/BAMs/COLO829_40pc.bam',
        '/g/data/gx8/data/10X/10X_EMA/BAMs/COLO829_20pc.bam',
    ]
}

# ENSEMBLE, UMCCRISED
somatic_vcfs = {
    BWA: [
        '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/umccrised/COLO829_100pc-downsample-batch__Colo829_downsample/small_variants/COLO829_100pc-downsample-batch__Colo829_downsample-somatic-ensemble-pon_hardfiltered.vcf.gz',
        '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/umccrised/COLO829_80pc-downsample-batch__Colo829_80pc_downsample/small_variants/COLO829_80pc-downsample-batch__Colo829_80pc_downsample-somatic-ensemble-pon_hardfiltered.vcf.gz',
        '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/umccrised/COLO829_40pc-downsample-batch__Colo829_40pc_downsample/small_variants/COLO829_40pc-downsample-batch__Colo829_40pc_downsample-somatic-ensemble-pon_hardfiltered.vcf.gz',
        '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/umccrised/COLO829_20pc-downsample-batch__Colo829_20pc_downsample/small_variants/COLO829_20pc-downsample-batch__Colo829_20pc_downsample-somatic-ensemble-pon_hardfiltered.vcf.gz',
        '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/umccrised/COLO829_60pc-downsample-batch__Colo829_60pc_downsample/small_variants/COLO829_60pc-downsample-batch__Colo829_60pc_downsample-somatic-ensemble-pon_hardfiltered.vcf.gz',
    ],
    EMA: [
        '/g/data/gx8/data/10X/10X_EMA/bcbio_original/umccrised/COLO829_100pc-batch__COLO829_100pc_EMA/small_variants/COLO829_100pc-batch__COLO829_100pc_EMA-somatic-ensemble-pon_hardfiltered.vcf.gz',
        '/g/data/gx8/data/10X/10X_EMA/bcbio_original/umccrised/COLO829_80pc-batch__COLO829_80pc_EMA/small_variants/COLO829_80pc-batch__COLO829_80pc_EMA-somatic-ensemble-pon_hardfiltered.vcf.gz',
        '/g/data/gx8/data/10X/10X_EMA/bcbio_original/umccrised/COLO829_60pc-batch__COLO829_60pc_EMA/small_variants/COLO829_60pc-batch__COLO829_60pc_EMA-somatic-ensemble-pon_hardfiltered.vcf.gz',
        '/g/data/gx8/data/10X/10X_EMA/bcbio_original/umccrised/COLO829_40pc-batch__COLO829_40pc_EMA/small_variants/COLO829_40pc-batch__COLO829_40pc_EMA-somatic-ensemble-pon_hardfiltered.vcf.gz',
        '/g/data/gx8/data/10X/10X_EMA/bcbio_original/umccrised/COLO829_20pc-batch__COLO829_20pc_EMA/small_variants/COLO829_20pc-batch__COLO829_20pc_EMA-somatic-ensemble-pon_hardfiltered.vcf.gz',
    ]
}

key_genes_bed = get_key_genes_bed('GRCh37')

germline_cancer = {
    BWA: '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/umccrised/COLO829_100pc-downsample-batch__Colo829_downsample/small_variants/COLO829_100pc-downsample-batch__Colo829_downsample-normal-ensemble-cancer_genes.vcf.gz',
    EMA: '/g/data/gx8/data/10X/10X_EMA/bcbio_original/umccrised/COLO829_100pc-batch__COLO829_100pc_EMA/small_variants/COLO829_100pc-batch__COLO829_100pc_EMA-normal-ensemble-cancer_genes.vcf.gz',
}
germline_all = {
    BWA: '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/final/2018-07-17_10X-Collaboration_downsample/Colo829_B_downsample-ensemble-annotated.vcf.gz',
    EMA: '/g/data/gx8/data/10X/10X_EMA/bcbio_original/final/2018-07-14_10X-Collaboration_EMA/COLO829BL_EMA-germline-ensemble-annotated.vcf.gz',
}
# germline_bam = {
#     BWA: ''
#     EMA: ''
# }

# STRELKA2, BCBIO
#
# bwa_vcfs = [
#     '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/final/2018-07-17_10X-Collaboration_downsample/COLO829_100pc-downsample-batch-strelka2-annotated.vcf.gz',
#     '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/final/2018-07-17_10X-Collaboration_downsample/COLO829_80pc-downsample-batch-strelka2-annotated.vcf.gz',
#     '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/final/2018-07-17_10X-Collaboration_downsample/COLO829_60pc-downsample-batch-strelka2-annotated.vcf.gz',
#     '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/final/2018-07-17_10X-Collaboration_downsample/COLO829_40pc-downsample-batch-strelka2-annotated.vcf.gz',
#     '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/final/2018-07-17_10X-Collaboration_downsample/COLO829_20pc-downsample-batch-strelka2-annotated.vcf.gz',
# ]

# ema_vcfs = [
#     '/g/data/gx8/data/10X/10X_EMA/bcbio_original/final/2018-07-14_10X-Collaboration_EMA/COLO829_100pc-batch-strelka2-annotated.vcf.gz',
#     '/g/data/gx8/data/10X/10X_EMA/bcbio_original/final/2018-07-14_10X-Collaboration_EMA/COLO829_80pc-batch-strelka2-annotated.vcf.gz',
#     '/g/data/gx8/data/10X/10X_EMA/bcbio_original/final/2018-07-14_10X-Collaboration_EMA/COLO829_60pc-batch-strelka2-annotated.vcf.gz',
#     '/g/data/gx8/data/10X/10X_EMA/bcbio_original/final/2018-07-14_10X-Collaboration_EMA/COLO829_40pc-batch-strelka2-annotated.vcf.gz',
#     '/g/data/gx8/data/10X/10X_EMA/bcbio_original/final/2018-07-14_10X-Collaboration_EMA/COLO829_20pc-batch-strelka2-annotated.vcf.gz',
# ]

# samples = defaultdict(dict)
# for i, sname in enumerate(snames):
#     samples[sname][BWA_PREF] = dict(
#         bam=bwa_bams[i],
#         somatic_vcf=bwa_vcf,
#         germline_vcf=
#     )
#     samples[sname][EMA_PREF] = dict(
#         bam=ema_bam,
#         vcf=ema_vcf,
#     )


rule all:
    input:
        expand('output/{tech}_{sname}.phased.vcf', tech=[BWA, EMA], sname=snames)


# generate phased VCF with populated GT tags
rule to_vcf:
    input:
        vcf = 'work/vcf_prep/{tech}_{sname}.vcf',
        hap = 'work/hap/{tech}_{sname}.hap'
    output:
        'output/{tech}_{sname}.phased.vcf'
    shell:
        'fgbio HapCutToVcf -v {input.vcf} -i {input.hap} -o {output} && [[ -s {output} ]]'
    

# run HapCUT2 to assemble haplotypes from combined haplotype fragments
rule run_hapcut2:
    input:
        frag = 'work/frag/{tech}_{sname}.frag',
        vcf = 'work/vcf_prep/{tech}_{sname}.vcf'
    output:
        'work/hap/{tech}_{sname}.hap'
    params:
        args = lambda wc: '--nf 1' if wc.tech == EMA else ''
    shell:
        'HAPCUT2 --fragments {input.frag} --vcf {input.vcf} --output {output} {params.args} && [[ -s {output} ]]'


# link reads into 10X molecule haplotype fragments
rule link_fragments:
    input:
        bam = lambda wc: bams[EMA][snames.index(wc.sname)],
        bai = lambda wc: bams[EMA][snames.index(wc.sname)] + '.bai',
        vcf = 'work/vcf_prep/EMA_{sname}.vcf',
        frag = 'work/unlinked_frag/EMA_{sname}.frag'
    output:
        'work/frag/EMA_{sname}.frag'
    shell:
        'LinkFragments.py --bam {input.bam} --VCF {input.vcf} --fragments {input.frag} --out {output} && [[ -s {output} ]]'


# extract haplotype informative reads
rule extractHAIRS_truseq:
    input:
        bam = lambda wc: bams[EMA][snames.index(wc.sname)],
        vcf = 'work/vcf_prep/BWA_{sname}.vcf'
    output:
        'work/frag/BWA_{sname}.frag'
    shell:
        'extractHAIRS --bam {input.bam} --VCF {input.vcf} --ref {ref} > {output} && [[ -s {output} ]]'


# extract haplotype informative reads
rule extractHAIRS_10x:
    input:
        bam = lambda wc: bams[EMA][snames.index(wc.sname)],
        vcf = 'work/vcf_prep/EMA_{sname}.vcf'
    output:
        'work/unlinked_frag/EMA_{sname}.frag'
    shell:
        'extractHAIRS --10X 1 --bam {input.bam} --VCF {input.vcf} --ref {ref} > {output} && [[ -s {output} ]]'


rule merge_vcf:
    input:
        germline_vcf = 'work/vcf_germline/{tech}.vcf.gz',
        somatic_vcf = 'work/vcf_somatic/{tech}_{sname}.vcf.gz'
    output:
        'work/vcf_prep/{tech}_{sname}.vcf'
    shell:
        'bcftools concat --allow-overlaps {input.germline_vcf} {input.somatic_vcf} -o {output}'


rule prep_germline_vcf:
    input:
        germline_vcf = lambda wc: germline_all[wc.tech],
        key_genes_bed = key_genes_bed
    output:
        'work/vcf_germline/{tech}.vcf.gz'
    params:
        genes = lambda wc, input, output: f'-T {input.key_genes_bed}' if CANCER_GENES else '',
        vcf_sample_name = lambda wc, input, output: get_tumor_sample_name(input.germline_vcf)
    shell: '''
        bcftools view -f.,PASS {input.germline_vcf} {params.genes} |
        bcftools filter -e "GT=='.|.' | GT=='.|1' | GT=='1|.' | GT=='1'" | 
        sed 's/{params.vcf_sample_name}/SAMPLE/' | 
        bgzip -c > {output}
        tabix -p vcf {output}
    '''


# extract the tumor sample (HapCUT doesn't like multi-sample VCFs)
# overlap with the truth set to get identical number of variants
# subset to cancer genes if CANCER_GENES
# rename VCF sample name to generic "SAMPLE"
rule prep_somatic_vcf:
    input:
        somatic_vcf = lambda wc: somatic_vcfs[wc.tech][snames.index(wc.sname)],
        key_genes_bed = key_genes_bed,
        truth = colo_truth
    output:
        'work/vcf_somatic/{tech}_{sname}.vcf.gz'
    params:
        genes = lambda wc, input, output: f'-T {input.key_genes_bed}' if CANCER_GENES else '',
        tmp_file = 'work/vcf_somatic/{tech}_{sname}.tmp.vcf.gz',
        isec_dir = 'work/vcf_somatic/{tech}_{sname}',
        tumor_name = lambda wc, input, output: get_tumor_sample_name(input[0])
    shell: '''
        bcftools view -f.,PASS -s {params.tumor_name} {params.genes} {input[0]} -Oz -o {params.tmp_file}
        tabix -p vcf {params.tmp_file}
        bcftools isec {params.tmp_file} {input.truth} -n=2 -w1 -p {params.isec_dir}
        sed 's/{params.tumor_name}/SAMPLE/' {params.isec_dir}/0000.vcf | bgzip -c > {output}
        tabix -p vcf {output}
        '''
