localrules: all

import sys, os

ref = '/g/data3/gx8/local/development/bcbio/genomes/Hsapiens/GRCh37/seq/GRCh37.fa'

truseq_bams = [
    '/g/data/gx8/data/10X/TruSeq/bcbio_original/BAMs/Colo829-ready_downsample.bam',
    '/g/data/gx8/data/10X/TruSeq/bcbio_original/BAMs/Colo829_20pc-ready_downsample.bam',
    '/g/data/gx8/data/10X/TruSeq/bcbio_original/BAMs/Colo829_40pc-ready_downsample.bam',
    '/g/data/gx8/data/10X/TruSeq/bcbio_original/BAMs/Colo829_60pc-ready_downsample.bam',
    '/g/data/gx8/data/10X/TruSeq/bcbio_original/BAMs/Colo829_80pc-ready_downsample.bam',
]

ema_bams = [
    '/g/data/gx8/data/10X/10X_EMA/BAMs/COLO829_100pc.bam',
    '/g/data/gx8/data/10X/10X_EMA/BAMs/COLO829_80pc.bam',
    '/g/data/gx8/data/10X/10X_EMA/BAMs/COLO829_60pc.bam',
    '/g/data/gx8/data/10X/10X_EMA/BAMs/COLO829_40pc.bam',
    '/g/data/gx8/data/10X/10X_EMA/BAMs/COLO829_20pc.bam',
]

truseq_vcfs = [
    '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/final/2018-07-17_10X-Collaboration_downsample/COLO829_100pc-downsample-batch-strelka2-annotated.vcf.gz',
    '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/final/2018-07-17_10X-Collaboration_downsample/COLO829_20pc-downsample-batch-strelka2-annotated.vcf.gz',
    '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/final/2018-07-17_10X-Collaboration_downsample/COLO829_40pc-downsample-batch-strelka2-annotated.vcf.gz',
    '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/final/2018-07-17_10X-Collaboration_downsample/COLO829_60pc-downsample-batch-strelka2-annotated.vcf.gz',
    '/g/data/gx8/data/10X/TruSeq/bcbio_downsampled/final/2018-07-17_10X-Collaboration_downsample/COLO829_80pc-downsample-batch-strelka2-annotated.vcf.gz',
]

ema_vcfs = [
    '/g/data/gx8/data/10X/10X_EMA/bcbio_original/final/2018-07-14_10X-Collaboration_EMA/COLO829_100pc-batch-strelka2-annotated.vcf.gz',
    '/g/data/gx8/data/10X/10X_EMA/bcbio_original/final/2018-07-14_10X-Collaboration_EMA/COLO829_80pc-batch-strelka2-annotated.vcf.gz',
    '/g/data/gx8/data/10X/10X_EMA/bcbio_original/final/2018-07-14_10X-Collaboration_EMA/COLO829_60pc-batch-strelka2-annotated.vcf.gz',
    '/g/data/gx8/data/10X/10X_EMA/bcbio_original/final/2018-07-14_10X-Collaboration_EMA/COLO829_40pc-batch-strelka2-annotated.vcf.gz',
    '/g/data/gx8/data/10X/10X_EMA/bcbio_original/final/2018-07-14_10X-Collaboration_EMA/COLO829_20pc-batch-strelka2-annotated.vcf.gz',
]

snames = [
    '100pc-downsample-strelka2',
    '20pc-downsample-strelka2',
    '40pc-downsample-strelka2',
    '60pc-downsample-strelka2',
    '80pc-downsample-strelka2',
]

samples = dict()
for sname, t_bam, e_bam, t_vcf, e_vcf in zip(snames, truseq_bams, ema_bams, truseq_vcfs, ema_vcfs):
    samples[sname] = dict(
        t_bam=t_bam,
        e_bam=e_bam,
        t_vcf=t_vcf,
        e_vcf=e_vcf,
        t_prefix='TruSeq_' + sname,
        e_prefix='EMA_' + sname,
    )

rule all:
    input:
        expand('output/TruSeq_{sname}.hap', sname=snames),
        expand('output/EMA_{sname}.hap', sname=snames)


rule unzip_ema_vcf:
    input:
        lambda wc: samples[wc.sname]['e_vcf']
    output:
        'work/EMA_{sname}.vcf'
    shell:
        'bcftools view -f.,PASS {input} > {output}'


rule unzip_truseq_vcf:
    input:
        lambda wc: samples[wc.sname]['t_vcf']
    output:
        'work/TruSeq_{sname}.vcf'
    shell:
        'bcftools view -f.,PASS {input} > {output}'


# extract UNLINKED haplotype informative reads
rule extractHAIRS_ema:
    input:
        bam = lambda wc: samples[wc.sname]['e_bam'],
        vcf = rules.unzip_ema_vcf.output
    output:
        frag = 'work/unlinked_frag/EMA_{sname}'
    shell:
        'extractHAIRS --10X 1 --bam {input.bam} --VCF {input.vcf} --ref {ref} > {output.frag}'


# extract UNLINKED haplotype informative reads
rule extractHAIRS_truseq:
    input:
        bam = lambda wc: samples[wc.sname]['t_bam'],
        vcf = rules.unzip_truseq_vcf.output
    output:
        frag = 'work/frag/TruSeq_{sname}'
    shell:
        'extractHAIRS --bam {input.bam} --VCF {input.vcf} --ref {ref} > {output.frag}'


# link reads into 10X molecule haplotype fragments
rule link_fragments:
    input:
        bam = lambda wc: samples[wc.sname]['e_bam'],
        bai = lambda wc: samples[wc.sname]['e_bam'] + '.bai',
        vcf = rules.unzip_ema_vcf.output,
        frag = rules.extractHAIRS_ema.output.frag
    output:
        hairs = 'work/hairs/EMA_{sname}'
    shell:
        'LinkFragments.py --bam {input.bam} --VCF {input.vcf} --fragments {input.frag} --out {output.hairs}'


# run HapCUT2 to assemble haplotypes from combined 10X haplotype fragments
rule run_hapcut2_10x:
    input:
        frag = rules.link_fragments.output.hairs,
        vcf = rules.unzip_ema_vcf.output
    output:
        hap = 'output/EMA_{sname}.hap'
    shell:
        'HAPCUT2 --fragments {input.frag} --vcf {input.vcf} --output {output.hap} --nf 1'


# run HapCUT2 to assemble haplotypes from combined 10X haplotype fragments
rule run_hapcut2_truseq:
    input:
        frag = rules.extractHAIRS_truseq.output.frag,
        vcf = rules.unzip_truseq_vcf.output
    output:
        hap = 'output/TruSeq_{sname}.hap'
    shell:
        'HAPCUT2 --fragments {input.frag} --vcf {input.vcf} --output {output.hap}'


